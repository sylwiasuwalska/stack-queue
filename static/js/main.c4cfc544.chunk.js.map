{"version":3,"sources":["components/FormPattern.js","components/Stack.js","components/Queue.js","App.js","serviceWorker.js","index.js"],"names":["FormPattern","Form","onSubmit","this","props","handleSubmit","Group","Label","name","Control","type","value","number","onChange","handleChange","Button","variant","block","onClick","add","methodName1","remove","methodName2","React","Component","Stack","pushToStack","element","items","state","push","setState","popFromStack","length","pop","isEmpty","console","log","printStack","str","i","event","target","preventDefault","className","Queue","enqueue","dequeue","shift","printQueue","App","Jumbotron","fluid","Container","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c4cfc544.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\n\nclass FormPattern extends React.Component {\n  render() {\n    return (\n      <Form onSubmit={this.props.handleSubmit}>\n        <Form.Group>\n          <Form.Label>\n            Add new element to {this.props.name}:\n            <Form.Control\n              type=\"text\"\n              value={this.props.number}\n              onChange={this.props.handleChange}\n            />\n          </Form.Label>\n        </Form.Group>\n\n        <div>\n          <p>\n            Your element in {this.props.name} is: {this.props.number}\n          </p>\n        </div>\n        <Button\n          variant=\"secondary\"\n          block\n          onClick={() => this.props.add(this.props.number)}\n        >\n          Method {this.props.methodName1}\n        </Button>\n        <Button variant=\"secondary\" block onClick={this.props.remove}>\n          Method {this.props.methodName2}\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default FormPattern;\n","import React from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\n\nimport FormPattern from \"./FormPattern.js\";\n\nclass Stack extends React.Component {\n  constructor() {\n    super();\n    this.state = { items: [], number: 0 };\n  }\n\n  pushToStack = element => {\n    let items = this.state.items;\n    items.push(element);\n    this.setState({ items });\n  };\n\n  popFromStack = () => {\n    let items = this.state.items;\n    if (this.state.items.length == 0) return \"Underflow\";\n    let element = items.pop();\n    this.setState({ items });\n    return element;\n  };\n\n  isEmpty = () => {\n    console.log(this.state.items.length);\n    if (!this.state.items.length == 0) {\n      return this.printStack();\n    } else {\n      return \"Stack is empty\";\n    }\n  };\n\n  printStack = () => {\n    var str = \"\";\n    for (let i = 0; i < this.state.items.length; i++)\n      str += this.state.items[i] + \" \";\n    return `Current stack: ${str}`;\n  };\n\n  handleChange = event => {\n    this.setState({ number: event.target.value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n  };\n\n  render() {\n    return (\n      <div className=\"Stack\">\n        <section>\n          <h2>Stack</h2>\n          <p>LIFO - Last In First Out</p>\n        </section>\n        <FormPattern\n          name=\"stack\"\n          methodName1=\"push\"\n          methodName2=\"pop\"\n          number={this.state.number}\n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n          add={this.pushToStack}\n          remove={this.popFromStack}\n        />\n        <p>{this.isEmpty()}</p>\n      </div>\n    );\n  }\n}\n\nexport default Stack;\n","import React from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\n\nimport FormPattern from \"./FormPattern.js\";\n\nclass Queue extends React.Component {\n  constructor() {\n    super();\n    this.state = { items: [], number: 0 };\n  }\n\n  enqueue = element => {\n    let items = this.state.items;\n    items.push(element);\n    this.setState({ items });\n  };\n\n  dequeue = () => {\n    let items = this.state.items;\n    if (this.state.items.length == 0) return \"Underflow\";\n    let element = items.shift();\n    this.setState({ items });\n    return element;\n  };\n\n  isEmpty = () => {\n    if (!this.state.items.length == 0) {\n      return this.printQueue();\n    } else {\n      return \"Queue is empty\";\n    }\n  };\n\n  printQueue = () => {\n    var str = \"\";\n    for (let i = 0; i < this.state.items.length; i++)\n      str += this.state.items[i] + \" \";\n    return `Current queue: ${str}`;\n  };\n\n  handleChange = event => {\n    this.setState({ number: event.target.value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n  };\n\n  render() {\n    return (\n      <div className=\"Queue\">\n        <section>\n          <h2>Queue</h2>\n          <p>FIFO - First In First Out</p>\n        </section>\n        <FormPattern\n          name=\"queue\"\n          methodName1=\"enqueue\"\n          methodName2=\"dequeue\"\n          number={this.state.number}\n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n          add={this.enqueue}\n          remove={this.dequeue}\n        />\n        <p>{this.isEmpty()}</p>\n      </div>\n    );\n  }\n}\n\nexport default Queue;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { Jumbotron, Container, Row, Col } from \"react-bootstrap\";\nimport Stack from \"./components/Stack.js\";\nimport Queue from \"./components/Queue.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Jumbotron className=\"header\" fluid>\n        <Container>\n          <h1>Stack, Queue</h1>\n          <p>\n            Project as a part of the course Algorithms I by Princton University,\n            published on Coursera.\n          </p>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <Row>\n          <Col>\n            <Stack />\n          </Col>\n          <Col>\n            <Queue />\n          </Col>\n        </Row>\n      </Container>\n\n      <footer></footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}